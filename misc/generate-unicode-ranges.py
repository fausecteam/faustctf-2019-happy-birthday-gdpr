#!/usr/bin/env python3

import os.path

import requests

rune_blacklist = {
    0x1e96,
    0x1e97,
    0x1e98,
    0x1e99,
    0x1e9a,
    0xa7b8,
}
for r in list(rune_blacklist):
    for c in chr(r).lower() + chr(r).upper():
        rune_blacklist.add(ord(c))


def get_emoji_runes():
    res = requests.get('https://www.unicode.org/Public/emoji/12.0/emoji-data.txt')
    res.raise_for_status()
    runes = set()
    for line in res.text.splitlines():
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        line = line.split(';')[0].strip()
        if '..' in line:
            l, h = (int(x, 16) for x in line.split('..'))
        else:
            l = int(line, 16)
            h = l + 1
        for c in map(chr, range(l, h + 1)):
            if len(c.lower().encode('utf-8')) == len(c.upper().encode('utf-8')) and len(repr(c)) == 3 and ord(
                    c) not in rune_blacklist:
                runes.add(c)
    return runes


def get_latin_extended_runes():
    for l, h in [
        (0x0100, 0x017F),  # Latin Extended-A
        (0x0180, 0x024F),  # Latin Extended-B
        (0x1E00, 0x1EFF),  # Latin Extended Additional
        (0x2C60, 0x2C7F),  # Latin Extended-C
        (0xA720, 0xA7FF),  # Latin Extended-D
        (0xAB30, 0xAB6F),  # Latin Extended-E
    ]:
        for c in map(chr, range(l, h + 1)):
            if len(c.lower().encode('utf-8')) == len(c.upper().encode('utf-8')) and len(repr(c)) == 3 and ord(
                    c) not in rune_blacklist:
                yield c


def main():
    print("# AUTO-GENERATED DATA (generated by {})".format(os.path.basename(__file__)))
    print()
    print('EMOJI_CHARS', '=', repr(''.join(get_emoji_runes())))
    print('LATIN_CHARS', '=', repr(''.join(get_latin_extended_runes())))


if __name__ == '__main__':
    main()
